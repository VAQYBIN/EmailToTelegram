import asyncio
import logging
import os
import sys
from typing import Dict, Set
import json  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º - –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏
from pathlib import Path  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º - —É–ª—É—á—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É —Å –ø—É—Ç—è–º–∏ —Ñ–∞–π–ª–æ–≤
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from email_monitor import EmailMonitor, EmailConfig
from config_manager import ConfigManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_FILE = "user_configs.json"

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏


class ConfigStates(StatesGroup):
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.

    –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏
    —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ—á—Ç–æ–≤—ã–º–∏ —è—â–∏–∫–∞–º–∏ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram.
    """
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    choosing_config_action = State()    # –í—ã–±–æ—Ä: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, —É–¥–∞–ª–∏—Ç—å
    choosing_config_to_edit = State()   # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    choosing_config_to_delete = State()  # –í—ã–±–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

    # –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    waiting_for_config_name = State()   # –û–∂–∏–¥–∞–µ–º –∏–º—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    waiting_for_host = State()
    waiting_for_port = State()
    waiting_for_email = State()
    waiting_for_password = State()
    waiting_for_folder = State()
    waiting_for_interval = State()
    waiting_for_target_chat = State()


class EmailBot:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram-–±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.

    –¢–µ–ø–µ—Ä—å –±–æ—Ç —É–º–µ–µ—Ç:
    - –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ—á—Ç–æ–≤—ã–º–∏ —è—â–∏–∫–∞–º–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    """

    def __init__(self, bot_token: str, config_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.

        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        """
        self.bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher(storage=MemoryStorage())

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ç–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.config_manager = ConfigManager(config_file)

        # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ö–ª—é—á - user_id, –∑–Ω–∞—á–µ–Ω–∏–µ - EmailMonitor —Å–æ –≤—Å–µ–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.active_monitors: Dict[int, EmailMonitor] = {}

        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        self.running_users: Set[int] = set()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._register_handlers()

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤."""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message(CommandStart())(self.start_handler)
        self.dp.message(Command("setup"))(self.setup_handler)
        self.dp.message(Command("configs"))(self.configs_handler)
        self.dp.message(Command("start_monitoring"))(
            self.start_monitoring_handler)
        self.dp.message(Command("stop_monitoring"))(
            self.stop_monitoring_handler)
        self.dp.message(Command("status"))(self.status_handler)
        self.dp.message(Command("help"))(self.help_handler)

        # –ö–æ–ª–±—ç–∫–∏ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
        self.dp.callback_query(lambda c: c.data.startswith(
            "config_"))(self.handle_config_callback)
        self.dp.callback_query(lambda c: c.data.startswith(
            "confirm_delete_"))(self.handle_delete_confirmation)
        self.dp.callback_query(lambda c: c.data == "cancel_delete")(
            self.handle_cancel_deletion)
        self.dp.callback_query(lambda c: c.data == "back_to_configs")(
            self.handle_back_to_configs)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
        self.dp.message(ConfigStates.choosing_config_action)(
            self.process_config_action)
        self.dp.message(ConfigStates.choosing_config_to_edit)(
            self.process_config_to_edit)
        self.dp.message(ConfigStates.choosing_config_to_delete)(
            self.process_config_to_delete)
        self.dp.message(ConfigStates.waiting_for_config_name)(
            self.process_config_name)
        self.dp.message(ConfigStates.waiting_for_host)(self.process_host)
        self.dp.message(ConfigStates.waiting_for_port)(self.process_port)
        self.dp.message(ConfigStates.waiting_for_email)(self.process_email)
        self.dp.message(ConfigStates.waiting_for_password)(
            self.process_password)
        self.dp.message(ConfigStates.waiting_for_folder)(self.process_folder)
        self.dp.message(ConfigStates.waiting_for_interval)(
            self.process_interval)
        self.dp.message(ConfigStates.waiting_for_target_chat)(
            self.process_target_chat)

    async def start_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º."""
        welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Advanced Email Monitor Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤
–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä—è–º–æ –≤ Telegram.

<b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º (—Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞)
‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞
‚Ä¢ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
/configs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
/start_monitoring - –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç
/status - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞!
        """
        await message.answer(welcome_text)

    async def configs_handler(self, message: Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /configs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.

        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ø–æ—á—Ç–æ–≤—ã–º–∏ —è—â–∏–∫–∞–º–∏.
        """
        user_id = message.from_user.id
        user_configs = self.config_manager.get_user_configs(user_id)

        if not user_configs:
            await message.answer("""
üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
            """)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        config_text = f"<b>–í–∞—à–∏ –ø–æ—á—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({len(user_configs)}):</b>\n\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for config_name, config in user_configs.items():
            config_text += f"üìß <b>{config_name}</b>\n"
            config_text += f"   ‚îî {config.email} ({config.host})\n"
            config_text += f"   ‚îî –ü–∞–ø–∫–∞: {config.folder}, –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config.check_interval}—Å\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            keyboard.inline_keyboard.extend([
                [
                    InlineKeyboardButton(
                        text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {config_name}",
                        callback_data=f"config_edit_{config_name}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üóë –£–¥–∞–ª–∏—Ç—å {config_name}",
                        callback_data=f"config_delete_{config_name}"
                    )
                ]
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                callback_data="config_add_new"
            )
        ])

        await message.answer(config_text, reply_markup=keyboard)

    async def handle_config_callback(self, callback: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏."""
        data = callback.data
        # user_id = callback.from_user.id

        if data == "config_add_new":
            await self._start_new_config_creation(callback)
        elif data.startswith("config_edit_"):
            config_name = data.replace("config_edit_", "")
            await self._start_config_editing(callback, config_name)
        elif data.startswith("config_delete_"):
            config_name = data.replace("config_delete_", "")
            await self._confirm_config_deletion(callback, config_name)

        await callback.answer()

    async def handle_back_to_configs(self, callback: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
        user_id = callback.from_user.id
        user_configs = self.config_manager.get_user_configs(user_id)

        if not user_configs:
            await callback.message.edit_text("""
üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏</b>

–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
            """)
            await callback.answer()
            return

        # –í–æ—Å—Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        config_text = f"<b>–í–∞—à–∏ –ø–æ—á—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ({len(user_configs)}):</b>\n\n"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for config_name, config in user_configs.items():
            config_text += f"üìß <b>{config_name}</b>\n"
            config_text += f"   ‚îî {config.email} ({config.host})\n"
            config_text += f"   ‚îî –ü–∞–ø–∫–∞: {config.folder}, –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config.check_interval}—Å\n\n"

            keyboard.inline_keyboard.extend([
                [
                    InlineKeyboardButton(
                        text=f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {config_name}",
                        callback_data=f"config_edit_{config_name}"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text=f"üóë –£–¥–∞–ª–∏—Ç—å {config_name}",
                        callback_data=f"config_delete_{config_name}"
                    )
                ]
            ])

        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                callback_data="config_add_new"
            )
        ])

        await callback.message.edit_text(config_text, reply_markup=keyboard)
        await callback.answer()

    async def _start_new_config_creation(self, callback: CallbackQuery) -> None:
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state = FSMContext(
            storage=self.dp.storage,
            key=f"{callback.from_user.id}:{callback.message.chat.id}"
        )

        await state.set_state(ConfigStates.waiting_for_config_name)

        await callback.message.edit_text("""
üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>

–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã.

<b>–®–∞–≥ 1: –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</b>

–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏.

<b>–ü—Ä–∏–º–µ—Ä—ã –∏–º—ë–Ω:</b>
‚Ä¢ work_email
‚Ä¢ personal_gmail
‚Ä¢ support_mail
‚Ä¢ backup_email

<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</b>
        """)

    async def process_config_name(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        config_name = message.text.strip()
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
        existing_configs = self.config_manager.get_user_configs(user_id)
        if config_name in existing_configs:
            await message.answer(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –∏–º–µ–Ω–µ–º '{config_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await state.update_data(config_name=config_name)
        await state.set_state(ConfigStates.waiting_for_host)

        await message.answer(f"""
‚úÖ –ò–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: <code>{config_name}</code>

<b>–®–∞–≥ 2: IMAP —Å–µ—Ä–≤–µ—Ä</b>

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ IMAP —Å–µ—Ä–≤–µ—Ä—ã:</b>
‚Ä¢ Gmail: imap.gmail.com
‚Ä¢ Mail.ru: imap.mail.ru
‚Ä¢ Yandex: imap.yandex.ru
‚Ä¢ ProtonMail: 127.0.0.1 (—Ç—Ä–µ–±—É–µ—Ç ProtonMail Bridge)
‚Ä¢ Outlook: outlook.office365.com

<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å IMAP —Å–µ—Ä–≤–µ—Ä–∞:</b>
        """)

    async def setup_handler(self, message: Message, state: FSMContext) -> None:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /setup –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

        –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç
        –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
        """
        user_id = message.from_user.id
        existing_configs = self.config_manager.get_user_configs(user_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        config_name = f"config_{len(existing_configs) + 1}"

        await state.update_data(config_name=config_name)
        await state.set_state(ConfigStates.waiting_for_host)

        setup_text = f"""
üîß <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

–°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: <code>{config_name}</code>

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ IMAP —Å–µ—Ä–≤–µ—Ä—ã:</b>
‚Ä¢ Gmail: imap.gmail.com
‚Ä¢ Mail.ru: imap.mail.ru
‚Ä¢ Yandex: imap.yandex.ru
‚Ä¢ ProtonMail: 127.0.0.1 (—Ç—Ä–µ–±—É–µ—Ç ProtonMail Bridge)
‚Ä¢ Outlook: outlook.office365.com

<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å IMAP —Å–µ—Ä–≤–µ—Ä–∞:</b>
        """
        await message.answer(setup_text)

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Å—Ç–∞—é—Ç—Å—è –ø–æ—Ö–æ–∂–∏–º–∏, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç —Å config_name
    async def process_host(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ IMAP —Å–µ—Ä–≤–µ—Ä–∞."""
        host = message.text.strip()
        await state.update_data(host=host)
        await state.set_state(ConfigStates.waiting_for_port)

        port_text = f"""
‚úÖ IMAP —Å–µ—Ä–≤–µ—Ä: <code>{host}</code>

<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç:</b>

<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã:</b>
‚Ä¢ 993 - IMAP —Å SSL (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ 143 - IMAP –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞:</b>
        """
        await message.answer(port_text)

    async def process_port(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞."""
        try:
            port = int(message.text.strip())
            if not (1 <= port <= 65535):
                raise ValueError("–ü–æ—Ä—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65535:")
            return

        await state.update_data(port=port)
        await state.set_state(ConfigStates.waiting_for_email)

        await message.answer("""
‚úÖ –ü–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!

<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:</b>
        """)

    async def process_email(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∞–¥—Ä–µ—Å–∞."""
        email = message.text.strip()

        if "@" not in email or "." not in email:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(email=email)
        await state.set_state(ConfigStates.waiting_for_password)

        password_text = f"""
‚úÖ Email: <code>{email}</code>

<b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</b>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –¥–ª—è Gmail:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.

<i>–ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.</i>
        """
        await message.answer(password_text)

    async def process_password(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è."""
        password = message.text.strip()
        await state.update_data(password=password)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º
        try:
            await message.delete()
        except Exception:
            pass

        await state.set_state(ConfigStates.waiting_for_folder)

        await message.answer("""
‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)

<b>–ü–∞–ø–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>

<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–ø–∫–∏:</b>
‚Ä¢ INBOX - –í—Ö–æ–¥—è—â–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ Sent - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
‚Ä¢ Drafts - –ß–µ—Ä–Ω–æ–≤–∏–∫–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è INBOX:
        """)

    async def process_folder(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏."""
        folder = message.text.strip() or "INBOX"
        await state.update_data(folder=folder)
        await state.set_state(ConfigStates.waiting_for_interval)

        await message.answer(f"""
‚úÖ –ü–∞–ø–∫–∞: <code>{folder}</code>

<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):</b>

<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>
‚Ä¢ 60 - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
‚Ä¢ 300 - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ 600 - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
‚Ä¢ 1800 - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b>
        """)

    async def process_interval(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
        try:
            interval = int(message.text.strip())
            if interval < 30:
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 30 —Å–µ–∫—É–Ω–¥:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
            return

        await state.update_data(interval=interval)
        await state.set_state(ConfigStates.waiting_for_target_chat)

        current_chat_id = message.chat.id
        await message.answer(f"""
‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{interval} —Å–µ–∫—É–Ω–¥</code>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b>

<b>ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>

–¢–µ–∫—É—â–∏–π —á–∞—Ç: <code>{current_chat_id}</code>

<b>–í–≤–µ–¥–∏—Ç–µ chat_id:</b>
        """)

    async def process_target_chat(self, message: Message, state: FSMContext) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        try:
            target_chat_id = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        user_id = message.from_user.id
        config_name = data['config_name']

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = EmailConfig(
            host=data['host'],
            port=data['port'],
            email=data['email'],
            password=data['password'],
            folder=data['folder'],
            check_interval=data['interval'],
            target_chat_id=target_chat_id,
            user_id=user_id,
            config_name=config_name
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        success = self.config_manager.save_user_config(
            user_id, config, config_name)
        await state.clear()

        if success:
            success_text = f"""
üéâ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' —Å–æ–∑–¥–∞–Ω–∞!</b>

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –°–µ—Ä–≤–µ—Ä: <code>{config.host}:{config.port}</code>
‚Ä¢ Email: <code>{config.email}</code>
‚Ä¢ –ü–∞–ø–∫–∞: <code>{config.folder}</code>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{config.check_interval} —Å–µ–∫</code>
‚Ä¢ –ß–∞—Ç: <code>{config.target_chat_id}</code>

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ /start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
‚Ä¢ /configs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å

<i>–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥—É—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞!</i>
            """
            await message.answer(success_text)
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def start_monitoring_handler(self, message: Message) -> None:
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞—ë—Ç –µ–¥–∏–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
        –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        """
        user_id = message.from_user.id

        if user_id in self.running_users:
            await message.answer("‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_configs = self.config_manager.get_user_configs_list(user_id)

        if not user_configs:
            await message.answer("""
‚ùå <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</b>

–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫:
‚Ä¢ /setup - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ /configs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
            """)
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            monitor = EmailMonitor(user_configs, self.bot)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –ø–æ—á—Ç–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º
            connection_results = await monitor.test_all_connections()

            failed_connections = [
                email for email, success in connection_results.items() if not success]

            if failed_connections:
                failed_list = '\n'.join(
                    [f"‚Ä¢ {email}" for email in failed_connections])
                await message.answer(f"""
‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø–æ—á—Ç–æ–≤—ã–º —Å–µ—Ä–≤–µ—Ä–∞–º:</b>

{failed_list}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.
                """)
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.active_monitors[user_id] = monitor
            self.running_users.add(user_id)

            # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            asyncio.create_task(self._run_user_monitoring(user_id))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –æ –∑–∞–ø—É—Å–∫–µ
            config_info = []
            for config in user_configs:
                config_info.append(
                    f"üìß <b>{config.config_name}</b>: {config.email}")

            config_list = '\n'.join(config_info)

            await message.answer(f"""
‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –¥–ª—è {len(user_configs)} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π!</b>

{config_list}

‚è± <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
üéØ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã

<b>–í–∞–∂–Ω–æ:</b> –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∏—Å—å–º–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_monitoring –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
            """)

            logger.info(
                f"Monitoring started for user {user_id} with {len(user_configs)} configurations")

        except Exception as e:
            logger.error(f"Failed to start monitoring for user {user_id}: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

    async def _run_user_monitoring(self, user_id: int):
        """
        –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π EmailMonitor, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç
        –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        monitor = self.active_monitors.get(user_id)
        if not monitor:
            return

        try:
            while user_id in self.running_users:
                # –ú–æ–Ω–∏—Ç–æ—Ä —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                await monitor.check_new_emails()

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
                min_interval = min(
                    config.check_interval for config in monitor.configs)
                await asyncio.sleep(min_interval)

        except Exception as e:
            logger.error(f"Monitoring error for user {user_id}: {e}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ –≤ –ø–µ—Ä–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            if monitor.configs:
                try:
                    await self.bot.send_message(
                        monitor.configs[0].target_chat_id,
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_monitoring –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
                    )
                except Exception:
                    pass
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if user_id in self.running_users:
                self.running_users.remove(user_id)
            if user_id in self.active_monitors:
                await self.active_monitors[user_id].cleanup()
                del self.active_monitors[user_id]

    async def stop_monitoring_handler(self, message: Message) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        user_id = message.from_user.id

        if user_id not in self.running_users:
            await message.answer("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.running_users.remove(user_id)

        if user_id in self.active_monitors:
            await self.active_monitors[user_id].cleanup()
            del self.active_monitors[user_id]

        await message.answer("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
        logger.info(f"Monitoring stopped for user {user_id}")

    async def status_handler(self, message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_id = message.from_user.id
        user_configs = self.config_manager.get_user_configs(user_id)

        if not user_configs:
            await message.answer("""
üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –∏–ª–∏ /configs –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            """)
            return

        is_running = user_id in self.running_users
        status_icon = "‚úÖ" if is_running else "‚ùå"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_details = []
        for name, config in user_configs.items():
            last_check = "–ù–∏–∫–æ–≥–¥–∞"
            if config.last_check_time:
                last_check = config.last_check_time.strftime(
                    "%Y-%m-%d %H:%M:%S UTC")

            detail = f"""
<b>üìß {name}</b>
‚Ä¢ Email: <code>{config.email}</code>
‚Ä¢ –°–µ—Ä–≤–µ—Ä: <code>{config.host}:{config.port}</code>
‚Ä¢ –ü–∞–ø–∫–∞: <code>{config.folder}</code>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{config.check_interval} —Å–µ–∫</code>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <code>{last_check}</code>
‚Ä¢ –ß–∞—Ç: <code>{config.target_chat_id}</code>
            """
            config_details.append(detail)

        configs_text = '\n'.join(config_details)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        stats_text = ""
        if is_running and user_id in self.active_monitors:
            stats = self.active_monitors[user_id].get_stats()
            stats_text = f"""

<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: {stats['total_configs']}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {sum(len(processed) for processed in self.active_monitors[user_id].processed_messages.values())}
            """

        status_message = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

{status_icon} <b>–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}
üìÆ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π:</b> {len(user_configs)}

{configs_text}{stats_text}

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
{'‚Ä¢ /stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' if is_running else '‚Ä¢ /start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å'}
‚Ä¢ /configs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
        """

        await message.answer(status_message)

    async def help_handler(self, message: Message) -> None:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏."""
        help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º
/setup - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞
/configs - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
/start_monitoring - –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ—á—Ç
/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/status - –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–†–∞–±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏:</b>
1Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ /setup –∏–ª–∏ /configs
2Ô∏è‚É£ –ö–∞–∂–¥–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è
3Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –±–æ—Ç –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—Å–µ–º–∏ –ø–æ—á—Ç–∞–º–∏
4Ô∏è‚É£ –í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞

<b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–∏—Å—å–º–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
‚Ä¢ –ö–∞–∂–¥–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
‚Ä¢ –†–∞–∑–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—á—Ç
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—á—Ç—ã —á–∞—Ç—ã

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã:</b>
‚Ä¢ Gmail (—á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
‚Ä¢ Mail.ru, Yandex
‚Ä¢ ProtonMail (—Å ProtonMail Bridge)
‚Ä¢ –õ—é–±—ã–µ IMAP —Å–µ—Ä–≤–µ—Ä—ã

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü–∞—Ä–æ–ª–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞—Ä–æ–ª—è–º–∏
‚Ä¢ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫

–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!
        """
        await message.answer(help_text)

    async def process_config_action(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö, –Ω–æ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
        –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞.
        """
        await message.answer("""
‚ÑπÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏</b>

–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /configs
—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏.
        """)
        await state.clear()

    async def process_config_to_edit(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

        –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
        """
        await message.answer("""
‚ÑπÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</b>

–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /configs
–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.
        """)
        await state.clear()

    async def process_config_to_delete(self, message: Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.

        –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
        """
        await message.answer("""
‚ÑπÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π</b>

–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /configs
–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.
        """)
        await state.clear()

    async def handle_delete_confirmation(self, callback: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        config_name = callback.data.replace("confirm_delete_", "")
        user_id = callback.from_user.id

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            config = self.config_manager.get_user_config(user_id, config_name)
            if not config:
                await callback.message.edit_text(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await callback.answer()
                return

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            if user_id in self.running_users:
                await self.stop_monitoring_for_user(user_id)

            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            success = self.config_manager.delete_user_config(
                user_id, config_name)

            if success:
                await callback.message.edit_text(f"""
‚úÖ <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞</b>

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '<b>{config_name}</b>' ({config.email}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /configs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
–∏–ª–∏ /setup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.
                """)
                logger.info(
                    f"Configuration '{config_name}' deleted for user {user_id}")
            else:
                await callback.message.edit_text(f"""
‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>

–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é '{config_name}'.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
                """)

        except Exception as e:
            logger.error(
                f"Error deleting configuration '{config_name}' for user {user_id}: {e}")
            await callback.message.edit_text(f"""
‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}
            """)

        await callback.answer()

    async def handle_cancel_deletion(self, callback: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        await callback.message.edit_text("""
‚úÖ <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /configs –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏.
        """)
        await callback.answer()

    async def stop_monitoring_for_user(self, user_id: int) -> None:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
        """
        try:
            if user_id in self.running_users:
                self.running_users.remove(user_id)

            if user_id in self.active_monitors:
                await self.active_monitors[user_id].cleanup()
                del self.active_monitors[user_id]

            logger.info(
                f"Monitoring stopped for user {user_id} during configuration management")

        except Exception as e:
            logger.error(f"Error stopping monitoring for user {user_id}: {e}")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π."""
        logger.info("Starting Advanced Telegram Email Monitor Bot...")

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            stats = self.config_manager.get_config_stats()
            logger.info(
                f"Loaded configurations: {json.dumps(stats, indent=2, ensure_ascii=False)}")

            await self.dp.start_polling(self.bot)

        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
        except Exception as e:
            logger.error(f"Bot error: {e}")
        finally:
            await self._cleanup()

    async def _cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤."""
        logger.info("Cleaning up active monitors...")

        for user_id, monitor in self.active_monitors.items():
            try:
                await monitor.cleanup()
            except Exception as e:
                logger.error(
                    f"Error cleaning up monitor for user {user_id}: {e}")

        self.running_users.clear()
        self.active_monitors.clear()
        await self.bot.session.close()

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    async def _start_config_editing(self, callback: CallbackQuery, config_name: str) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.

        –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        """
        user_id = callback.from_user.id
        config = self.config_manager.get_user_config(user_id, config_name)

        if not config:
            await callback.message.edit_text(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è '{config_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ú–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        masked_password = "*" * \
            min(len(config.password), 8) if config.password else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        last_check = "–ù–∏–∫–æ–≥–¥–∞"
        if config.last_check_time:
            last_check = config.last_check_time.strftime(
                "%Y-%m-%d %H:%M:%S UTC")

        config_info = f"""
üîß <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_name}</b>

<b>üìß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>
‚Ä¢ –°–µ—Ä–≤–µ—Ä: <code>{config.host}:{config.port}</code>
‚Ä¢ Email: <code>{config.email}</code>
‚Ä¢ –ü–∞—Ä–æ–ª—å: <code>{masked_password}</code>
‚Ä¢ –ü–∞–ø–∫–∞: <code>{config.folder}</code>

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>{config.check_interval} —Å–µ–∫</code>
‚Ä¢ –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{config.target_chat_id}</code>
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: <code>{last_check}</code>

<b>üîç –§–∏–ª—å—Ç—Ä—ã:</b>
‚Ä¢ –ü–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é: <code>{config.filter_sender or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>
‚Ä¢ –ü–æ —Ç–µ–º–µ: <code>{config.filter_subject or '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>
‚Ä¢ –ü–æ –≤–ª–æ–∂–µ–Ω–∏—è–º: <code>{config.filter_has_attachments if config.filter_has_attachments is not None else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</code>

<b>üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>

<i>–í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.</i>
<i>–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:</i>

1. –£–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /configs
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å —Ç–µ–º –∂–µ –∏–º–µ–Ω–µ–º —á–µ—Ä–µ–∑ /setup
3. –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º –∏–º–µ–Ω–µ–º

<b>üîÑ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
‚Ä¢ –°–º–µ–Ω–∞ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                    callback_data=f"config_delete_{config_name}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                    callback_data="back_to_configs"
                )
            ]
        ])

        await callback.message.edit_text(config_info, reply_markup=keyboard)

    async def _confirm_config_deletion(self, callback: CallbackQuery, config_name: str) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                    callback_data=f"confirm_delete_{config_name}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_delete"
                )
            ]
        ])

        await callback.message.edit_text(
            f"üóë <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é '<b>{config_name}</b>'?\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=keyboard
        )

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è confirm_delete –∏ cancel_delete –∫–æ–ª–±—ç–∫–æ–≤


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Path –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    env_file = Path(".env")

    if not env_file.exists():
        logger.warning(
            ".env file not found, relying on system environment variables")

    bot_token = os.getenv("BOT_TOKEN")

    if not bot_token or bot_token == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        print("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram")
        sys.exit(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = Path(CONFIG_FILE)
    logger.info(f"Configuration file path: {config_path.absolute()}")

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = EmailBot(bot_token, CONFIG_FILE)

    try:
        asyncio.run(bot.start_polling())
    except KeyboardInterrupt:
        logger.info("Shutdown requested by user")
    except Exception as e:
        logger.error(f"Critical error: {e}")


if __name__ == "__main__":
    main()
