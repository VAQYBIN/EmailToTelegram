import asyncio
import logging
import os
import sys
from typing import Dict, Set
# import json
# from pathlib import Path
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from email_monitor import EmailMonitor, EmailConfig
from config_manager import ConfigManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –±–æ—Ç–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "user_configs.json"

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM (Finite State Machine) –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏


class ConfigStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
    –ü–æ–¥—É–º–∞–π—Ç–µ –æ–± —ç—Ç–æ–º –∫–∞–∫ –æ –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≥–¥–µ –∫–∞–∂–¥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —à–∞–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
    """
    waiting_for_host = State()        # –û–∂–∏–¥–∞–µ–º IMAP —Å–µ—Ä–≤–µ—Ä
    waiting_for_port = State()        # –û–∂–∏–¥–∞–µ–º –ø–æ—Ä—Ç
    waiting_for_email = State()       # –û–∂–∏–¥–∞–µ–º email –∞–¥—Ä–µ—Å
    waiting_for_password = State()    # –û–∂–∏–¥–∞–µ–º –ø–∞—Ä–æ–ª—å
    waiting_for_folder = State()      # –û–∂–∏–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    waiting_for_interval = State()    # –û–∂–∏–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
    waiting_for_target_chat = State()  # –û–∂–∏–¥–∞–µ–º ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π


class EmailBot:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
    - –û–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
    - –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã
    - –û—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    """

    def __init__(self, bot_token: str, config_file: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.

        Args:
            bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç BotFather
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–æ—Ç–∞
        self.bot = Bot(
            token=bot_token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.config_manager = ConfigManager(config_file)

        # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –ø–æ—á—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.active_monitors: Dict[int, EmailMonitor] = {}

        # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –∑–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.running_users: Set[int] = set()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self._register_handlers()

    def _register_handlers(self):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
        –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–µ–Ω—é –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ - –∫–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞
        —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é.
        """
        self.dp.message(CommandStart())(self.start_handler)
        self.dp.message(Command("setup"))(self.setup_handler)
        self.dp.message(Command("start_monitoring"))(
            self.start_monitoring_handler)
        self.dp.message(Command("stop_monitoring"))(
            self.stop_monitoring_handler)
        self.dp.message(Command("status"))(self.status_handler)
        self.dp.message(Command("help"))(self.help_handler)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        self.dp.message(ConfigStates.waiting_for_host)(self.process_host)
        self.dp.message(ConfigStates.waiting_for_port)(self.process_port)
        self.dp.message(ConfigStates.waiting_for_email)(self.process_email)
        self.dp.message(ConfigStates.waiting_for_password)(
            self.process_password)
        self.dp.message(ConfigStates.waiting_for_folder)(self.process_folder)
        self.dp.message(ConfigStates.waiting_for_interval)(
            self.process_interval)
        self.dp.message(ConfigStates.waiting_for_target_chat)(
            self.process_target_chat)

    async def start_handler(self, message: Message) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º"""
        welcome_text = f"""
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Email Monitor Bot!</b>

–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}!

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ –Ω–∞ –≤–∞—à–µ–º –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ
–∏ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä—è–º–æ –≤ Telegram.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª—é–±—ã–º IMAP-—Å–µ—Ä–≤–µ—Ä–∞–º (Gmail, Mail.ru, ProtonMail –∏ –¥—Ä.)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, —Ç–µ–º–µ –∏ –Ω–∞–ª–∏—á–∏—é –≤–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –ì–∏–±–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏

<b>–ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ
/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞!
        """
        await message.answer(welcome_text)

    async def setup_handler(self, message: Message, state: FSMContext) -> None:
        """
        –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        –≠—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        await state.set_state(ConfigStates.waiting_for_host)
        setup_text = """
üîß <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã</b>

–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É.

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ IMAP —Å–µ—Ä–≤–µ—Ä—ã:</b>
‚Ä¢ Gmail: imap.gmail.com
‚Ä¢ Mail.ru: imap.mail.ru
‚Ä¢ Yandex: imap.yandex.ru
‚Ä¢ ProtonMail: 127.0.0.1 (—Ç—Ä–µ–±—É–µ—Ç ProtonMail Bridge)
‚Ä¢ Outlook: outlook.office365.com

<b>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å IMAP —Å–µ—Ä–≤–µ—Ä–∞:</b>
(–Ω–∞–ø—Ä–∏–º–µ—Ä: imap.gmail.com)
        """
        await message.answer(setup_text)

    async def process_host(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ IMAP —Å–µ—Ä–≤–µ—Ä–∞"""
        host = message.text.strip()
        await state.update_data(host=host)
        await state.set_state(ConfigStates.waiting_for_port)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        port_text = f"""
‚úÖ IMAP —Å–µ—Ä–≤–µ—Ä: <code>{host}</code>

<b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç:</b>

<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã:</b>
‚Ä¢ 993 - IMAP —Å SSL (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
‚Ä¢ 143 - IMAP –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è

<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞:</b>
        """
        await message.answer(port_text)

    async def process_port(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏"""
        try:
            port = int(message.text.strip())
            if not (1 <= port <= 65535):
                raise ValueError("–ü–æ—Ä—Ç –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        except ValueError:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 65535:")
            return

        await state.update_data(port=port)
        await state.set_state(ConfigStates.waiting_for_email)

        await message.answer("""
‚úÖ –ü–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!

<b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:</b>
(–Ω–∞–ø—Ä–∏–º–µ—Ä: user@gmail.com)
        """)

    async def process_email(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ email –∞–¥—Ä–µ—Å–∞ —Å –±–∞–∑–æ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        email = message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
        if "@" not in email or "." not in email:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return

        await state.update_data(email=email)
        await state.set_state(ConfigStates.waiting_for_password)

        password_text = f"""
‚úÖ Email: <code>{email}</code>

<b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</b>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ –¥–ª—è Gmail –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>
–î–ª—è Gmail –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "–ü–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" –≤–º–µ—Å—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è.
–í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

<i>–ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.</i>
        """
        await message.answer(password_text)

    async def process_password(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —É–¥–∞–ª–µ–Ω–∏–µ–º –∏–∑ —á–∞—Ç–∞"""
        password = message.text.strip()
        await state.update_data(password=password)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –∏–∑ —á–∞—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            await message.delete()
        except Exception:
            pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        await state.set_state(ConfigStates.waiting_for_folder)

        await message.answer("""
‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω! (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)

<b>–£–∫–∞–∂–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>

<b>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–ø–∫–∏:</b>
‚Ä¢ INBOX - –í—Ö–æ–¥—è—â–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
‚Ä¢ Sent - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
‚Ä¢ Drafts - –ß–µ—Ä–Ω–æ–≤–∏–∫–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è INBOX:
        """)

    async def process_folder(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        folder = message.text.strip()
        if not folder:
            folder = "INBOX"  # –ü–∞–ø–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        await state.update_data(folder=folder)
        await state.set_state(ConfigStates.waiting_for_interval)

        interval_text = f"""
‚úÖ –ü–∞–ø–∫–∞: <code>{folder}</code>

<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã:</b>

–ö–∞–∫ —á–∞—Å—Ç–æ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞?

<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>
‚Ä¢ 60 - –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
‚Ä¢ 300 - –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ 600 - –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
‚Ä¢ 1800 - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

<b>–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:</b>
        """
        await message.answer(interval_text)

    async def process_interval(self, message: Message, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        try:
            interval = int(message.text.strip())
            if interval < 30:  # –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª - 30 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö):")
            return

        await state.update_data(interval=interval)
        await state.set_state(ConfigStates.waiting_for_target_chat)

        # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_chat_id = message.chat.id

        await message.answer(f"""
‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: <code>{interval} —Å–µ–∫—É–Ω–¥</code>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!</b>

<b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö?</b>

–¢–µ–∫—É—â–∏–π —á–∞—Ç: <code>{current_chat_id}</code>

–í—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å <code>{current_chat_id}</code> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —ç—Ç–æ—Ç —á–∞—Ç
‚Ä¢ –£–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π chat_id
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –≥—Ä—É–ø–ø—ã

<b>–í–≤–µ–¥–∏—Ç–µ chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
        """)

    async def process_target_chat(self, message: Message, state: FSMContext) -> None:
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        –ó–¥–µ—Å—å —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            target_chat_id = int(message.text.strip())
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        data = await state.get_data()
        user_id = message.from_user.id

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é email –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        config = EmailConfig(
            host=data['host'],
            port=data['port'],
            email=data['email'],
            password=data['password'],
            folder=data['folder'],
            check_interval=data['interval'],
            target_chat_id=target_chat_id,
            user_id=user_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config_manager.save_user_config(user_id, config)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        success_text = f"""
üéâ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:</b>
‚Ä¢ –°–µ—Ä–≤–µ—Ä: <code>{config.host}:{config.port}</code>
‚Ä¢ Email: <code>{config.email}</code>
‚Ä¢ –ü–∞–ø–∫–∞: <code>{config.folder}</code>
‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{config.check_interval} —Å–µ–∫</code>
‚Ä¢ –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{config.target_chat_id}</code>

<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ /start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
‚Ä¢ /status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
‚Ä¢ /help - –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã

<i>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞.</i>
        """

        await message.answer(success_text)
        logger.info(f"Configuration saved for user {user_id}")

    async def start_monitoring_handler(self, message: Message) -> None:
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if user_id in self.running_users:
            await message.answer("‚ö° –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config = self.config_manager.get_user_config(user_id)
        if not config:
            await message.answer("""
‚ùå <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!</b>

–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /setup
            """)
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –ø–æ—á—Ç—ã
            monitor = EmailMonitor(config, self.bot)

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
            connection_ok = await monitor.test_connection()
            if not connection_ok:
                await message.answer("""
‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É</b>

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è Gmail.
                """)
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            self.active_monitors[user_id] = monitor
            self.running_users.add(user_id)

            # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            asyncio.create_task(self._run_user_monitoring(user_id))

            await message.answer(f"""
‚úÖ <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!</b>

üìß –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: <code>{config.email}</code>
üìÅ –ü–∞–ø–∫–∞: <code>{config.folder}</code>
‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{config.check_interval} —Å–µ–∫</code>
üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç: <code>{config.target_chat_id}</code>

–ë–æ—Ç –Ω–∞—á–Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö.
            """)

            logger.info(f"Email monitoring started for user {user_id}")

        except Exception as e:
            logger.error(f"Failed to start monitoring for user {user_id}: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}")

    async def _run_user_monitoring(self, user_id: int):
        """
        –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –†–∞–±–æ—Ç–∞–µ—Ç –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        monitor = self.active_monitors.get(user_id)
        if not monitor:
            return

        try:
            while user_id in self.running_users:
                await monitor.check_new_emails()
                await asyncio.sleep(monitor.config.check_interval)

        except Exception as e:
            logger.error(f"Monitoring error for user {user_id}: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await self.bot.send_message(
                    monitor.config.target_chat_id,
                    f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã: {str(e)}\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_monitoring –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
                )
            except Exception:
                pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        finally:
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if user_id in self.running_users:
                self.running_users.remove(user_id)
            if user_id in self.active_monitors:
                del self.active_monitors[user_id]

    async def stop_monitoring_handler(self, message: Message) -> None:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã"""
        user_id = message.from_user.id

        if user_id not in self.running_users:
            await message.answer("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.running_users.remove(user_id)
        if user_id in self.active_monitors:
            del self.active_monitors[user_id]

        await message.answer("üî¥ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info(f"Email monitoring stopped for user {user_id}")

    async def status_handler(self, message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = message.from_user.id
        config = self.config_manager.get_user_config(user_id)

        if not config:
            await message.answer("""
üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            """)
            return

        is_running = user_id in self.running_users
        status_icon = "‚úÖ" if is_running else "‚ùå"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if is_running else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

        status_message = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>

{status_icon} –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>
üìß Email: <code>{config.email}</code>
üñ• –°–µ—Ä–≤–µ—Ä: <code>{config.host}:{config.port}</code>
üìÅ –ü–∞–ø–∫–∞: <code>{config.folder}</code>
‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <code>{config.check_interval} —Å–µ–∫</code>
üéØ –ß–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <code>{config.target_chat_id}</code>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
{'‚Ä¢ /stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' if is_running else '‚Ä¢ /start_monitoring - –ó–∞–ø—É—Å—Ç–∏—Ç—å'}
        """

        await message.answer(status_message)

    async def help_handler(self, message: Message) -> None:
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
        help_text = """
üÜò <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –±–æ—Ç–æ–º
/setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ
/start_monitoring - –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/stop_monitoring - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:</b>
1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ /start_monitoring
3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö –≤ Telegram

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–æ—á—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã:</b>
‚Ä¢ Gmail (—á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π)
‚Ä¢ Mail.ru, Yandex
‚Ä¢ ProtonMail (—Å ProtonMail Bridge)
‚Ä¢ –õ—é–±—ã–µ IMAP —Å–µ—Ä–≤–µ—Ä—ã

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ü–∞—Ä–æ–ª–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø—Ä–∏ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª—è–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ

–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!
        """

        await message.answer(help_text)

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long-polling"""
        logger.info("Starting Telegram Email Monitor Bot...")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            await self._load_existing_configs()

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.dp.start_polling(self.bot)

        except KeyboardInterrupt:
            logger.info("Bot stopped by user")
        except Exception as e:
            logger.error(f"Bot error: {e}")
        finally:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—Ç–∞
            await self._cleanup()

    async def _load_existing_configs(self):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
        –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
        """
        configs = self.config_manager.get_all_configs()
        logger.info(f"Found {len(configs)} existing configurations")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        # –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞

    async def _cleanup(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤"""
        logger.info("Cleaning up active monitors...")
        self.running_users.clear()
        self.active_monitors.clear()
        await self.bot.session.close()


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞.
    """
    if os.getenv("BOT_TOKEN") == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π BOT_TOKEN")
        print("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram")
        sys.exit(1)

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = EmailBot(os.getenv("BOT_TOKEN"), CONFIG_FILE)

    try:
        asyncio.run(bot.start_polling())
    except KeyboardInterrupt:
        logger.info("Shutdown requested by user")
    except Exception as e:
        logger.error(f"Critical error: {e}")


if __name__ == "__main__":
    main()
